/*useEffect(() => {
        axiosSecure.get(`/userHealthRecord-Nocount/${currentUser?.email}`)
          .then((res) => {
            setFormData({
                weight: res.data.weight || '',
                height: res.data.height || '',
                averageHeartRate: res.data.averageHeartRate || '',
                bloodPressure: res.data.bloodPressure || '',
                existingMedicalCondition: res.data.existingMedicalCondition || '',
                anySurgeries: res.data.anySurgeries || '',
                currentLevelofPhysicalActivity: res.data.currentLevelofPhysicalActivity || '',
                fitnessGoals: res.data.fitnessGoals || '',
                AnyAllergies: res.data.AnyAllergies || '',
                stressScale: res.data.stressScale || '',
                sleepHours: res.data.sleepHours || '',
              });
          })
          .catch((error) => {
            console.log(error);
          });
    }, [axiosSecure, currentUser?.email]);







    app.patch('/update-userHRecord/:email', async (req, res) => {
      const email = req.params.email;
      const updateRecord = req.body;
      const filter = { email: email };
      const options = { upsert: true };
      const updateDoc = {
        $set: {
          weight: updateRecord.weight,
          height: updateRecord.height,
          averageHeartRate: updateRecord.averageHeartRate,
          bloodPressure: updateRecord.bloodPressure,
          existingMedicalCondition: updateRecord.existingMedicalCondition,
          anySurgeries: updateRecord.anySurgeries,
          currentLevelofPhysicalActivity: updateRecord.currentLevelofPhysicalActivity,
          fitnessGoals: updateRecord.fitnessGoals,
          AnyAllergies: updateRecord.AnyAllergies,
          stressScale: updateRecord.stressScale,
          sleepHours: updateRecord.sleepHours,
        }
      };
      
      const result =await userHealthRecordCollection.updateOne(filter,updateDoc,options)
      res.send(result);
    })
*/